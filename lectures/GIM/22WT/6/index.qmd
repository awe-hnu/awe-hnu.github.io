---
title: "`K6` Daten"
subtitle: "Wie entstehen n√ºtzliche Informationen?"
lang: de-DE

bibliography: ../assets/literature.bib

format: 
  html:
    output-file: index.html
  revealjs:
    date: "Wintersemester 2022"
    output-file: slides.html 
    include-after-body: ../assets/footer.html
---

# Top {.slide-link-hidden .unlisted .unnumbered visibility="hidden"}

<!-- LTeX: language=de-DE -->

[Pr√§sentation](slides.html)[^print] / [Big Picture](assets/big-picture.pdf)

{{< include ../assets/_version.qmd >}}

# Motivation {.vertical-center background-color="blue"}

> The world's most valuable resource is no longer oil, but data. *Steve Jobs (1997)*

::: notes
In den letzten beiden Kapiteln haben wir uns mit Informationssystemen und Gesch√§ftsprozessen besch√§ftigt. Informationssysteme werden in Gesch√§ftsprozessen eingesetzt, um sicherzustellen, dass die ben√∂tigten Daten in der passenden Form in der richtigen Qualit√§t zum richtigen Zeitpunkt zur Verf√ºgung stehen. In diesem Kapitel schauen wir etwas genauer an, was Daten sind und wie diese strukturiert sein m√ºssen, damit diese f√ºr das Unternehmen Wert erzeugen.
:::

# Lernergebnisse üéØ

Nach dieser Einheit k√∂nnen Sie

::: {.incremental}
- erl√§utern, was Daten sind und wie diese klassifiziert werden k√∂nnen,
- erkl√§ren, weshalb Daten zur Nutzung in modernen Informationssystemen __strukturiert__ werden sollen,
- die Besonderheit von __Big Data__ erl√§utern,
- die Begriffe __Datenredundanzen__ und __Dateninkonsistenzen__ sowie sich daraus ergebende Probleme erl√§utern,
- die Notwendigkeit und das Vorgehen der __Datenmodellierung__ beschreiben,
- ein einfaches __Entity-Relationship-Diagramm__ (ERM) zu entwerfen und daraus das __Relationenmodell__ abzuleiten.
:::

# Daten {.vertical-center background-color="blue"}

## Definition

Daten sind eine Menge an Zeichen, die einer bestimmten Syntax folgen, einen bestimmten Zweck haben und maschinell verarbeitet werden k√∂nnen.

. . .

Daten beschreiben __Objekte der realen Welt__ durch deren __Merkmale__ und deren __Beziehungen__ zueinander [@mertens2016grundzuge].

. . .

*Beispiel: Ein Datensatz kann ein Objekt ‚ÄûArtikel" durch dessen Merkmalen (z. B. Preis, Bezeichnung etc.) und Beziehungen zu anderen Objekten (z. B. Bestellungen, Lieferung) beschreiben.*

. . .

Ob aus Daten Informationen werden, ist davon, ob der __Empf√§nger__ die Daten in einen sachlichen __Kontext__ setzen und ihnen so Bedeutung zuordnen kann.

## Klassifizierung

Daten k√∂nnen beispielsweise nach folgenden Kriterien klassifiziert werden:

::: incremental
-   Zeichenart bzw. __Datentyp__: numerische (Ziffern), alphabetische (Buchstaben des Alphabets) und alphanumerische Daten (Ziffern, Buchstaben und Sonderzeichen)
-   __Erscheinungsform__: akustische (z. B. menschliche Laute), bildliche (z. B. Grafiken) und schriftliche Daten (z. B. Texte)
-   __Formatierung__: Formatierte (z. B. formgebundene Tabellen) und unformatierte Daten (z. B. formfreie Texte)
-   __Verwendungszweck__: selten zu ver√§ndernde Stammdaten (z. B. Personalstammdaten wie Namen und Adressen) und transaktionsorientierte Bewegungsdaten (z. B. Lagerzu- und --abg√§nge)
-   Stellung im __Verarbeitungsprozess__: Eingabe- und Ausgabedaten
:::

## Struktur

Die effiziente Nutzung von Daten in Informationssystemen erfordert eine __grundlegende Struktur__ zur Systematisierung bzw. Hierarchisierung von Daten:

::: incremental
-   Jeder __Datensatz__ besteht aus einem oder mehreren __Datenfeldern__,
-   die Datenfelder haben f√ºr alle Datens√§tze das gleiche Format,
-   die Datenfeldern eines Datensatzes h√§ngen in aller Regel inhaltlich zusammen,
-   alle zusammengeh√∂rigen Datens√§tze werden in einer __Tabelle__ zusammengefasst,
-   eine die __Datenbank__ vereint die logisch zusammengeh√∂renden Tabellen,
-   die Tabellen enthalten keine redundanten Daten, sind also __redundanzfrei__, und
-   die Datens√§tze weisen keine Widerspr√ºche auf, sind also __konsistent__.
:::

::: notes
::: callout-note
#### Datenredundanzen und Dateninkonsistenzen

Die Strukturierung von Daten in einer Datenbank hat unter anderem auch zum Ziel, Datenredundanzen und Dateninkonsistenzen zu vermeiden. - __Datenredundanzen:__ das mehrfache Vorkommen identischer Datenelemente in verschiedenen Tabellen und/oder Datenbanken (kurz Speicherorten, bspw. dieselben Kundendaten werden in zwei verschiedenen Systemen gespeichert) - __Dateninkonsistenzen:__ f√ºr dasselbe Attribut sind unterschiedliche Werte in Datenelementen gespeichert, die ein reales Objekt repr√§sentieren (bspw. unterschiedliche Geburtsdaten eines Kunden).
:::
:::

## Big Data

Der Begriff __Big Data__ meint w√∂rtlich die ‚Äûgro√üen Daten", also massive Datenmengen bzw. Massendaten, die sich durch die folgenden Eigenschaften auszeichnet [@leimeister2021einfuhrung, S. 201]:

:::{.incremental}
- Enorme Gr√∂√üe
- Eine hohe Komplexit√§t
- Schnelllebigkeit oder schnelles Aufkommen neuer Daten
- Schwach oder gar nicht strukturiert
:::

. . .

__Big Data Analytics__ beschreibt die __F√§higkeit__, diese gro√üen Datenmengen mit hoher Geschwindigkeit (oft in Echtzeit) zu verarbeiten, um wertvolle Einsichten zu gewinnen (oft auf Basis von Wahrscheinlichkeiten) [@lemke2015einfuhrung].

## Visualisierung

![Eigenschaften und Effekte von Big Data (4+1 Vs)](images/bigData.svg){#fig-bigData}

# Datenmodellierung {.vertical-center background-color="blue"}

## Ziel

Ziel der Datenmodellierung ist die Beschreibung der Unternehmensdaten in einem __Datenmodell__.

. . .

Ein unternehmensweites Datenmodell, bildet die __relevanten Objekte__ aller Bereiche des Unternehmens ab (Krcmar 2015).

. . .

Die Datenmodellierung findet __vor__ der Umsetzung bzw. Implementierung von Informationssystemen statt.

. . .

Im Rahmen der Datenmodellierung wird zun√§chst ein __konzeptionelles Schema__ erstellt. Dieses stellt alle relevanten Objekte, deren Eigenschaften sowie Beziehungen dar. Davon ausgehend wird dann ein __logisches Datenmodell__ abgeleitet (hier Tabellen).

::: notes
::: callout-note
### Unternehmensdatenmodell

Das Unternehmensdatenmodell beschreibt die Zusammenh√§nge zwischen den f√ºr die fachlichen Aufgaben (bspw. Vertrieb und Produktion) erforderlichen Daten. W√§hren der Modellierung werden fuÃàr verschiedene Aufgaben gemeinsam verwendete Daten identifiziert (bspw. Produkte) und die Voraussetzungen f√ºr die redundanzfreie und konsistente Verwendung geschaffen.
:::
:::

## Konzeptionelles Schema

Im konzeptionellen Schema (oder auch konzeptionelles Datenmodell) werden alle inhaltlichen Anforderungen an die Datenbank erfasst. Dies geschieht meist mittels einer grafisch orientierten, __formalen Modellierungssprache__.

. . .

Die am weitesten verbreitete Modellierungssprache ist das __Entity Relationship Model (ERM)__ nach Chen [@bachle2021einfuhrung].

. . .

Das Modell unterscheidet __Entit√§tstypen__ (relevante Objekte), __Attribute__ (Eigenschaften der Objekte) und __Beziehungen__ zwischen Entit√§tstypen.

## Beispiel

![Beispiel f√ºr ein konzeptionelles Datenmodell (ERM), eigene Darstellung](images/konzeptionellesSchema.svg){#fig-konzeptionellesSchema}

## Logisches Datenmodell

Ein logisches Datenmodell ist ein an dem f√ºr die physische Speicherung der Daten orientiertes Datenmodell.

. . .

Es wird aus dem __konzeptionellen Schema__ abgeleitet und dient als Basis f√ºr die Implementierung der spezifischen Datenbank.

. . .

In der Praxis sind relationale Datenbanksysteme am weitesten verbreitet. Deshalb kommt dem __relationalen Modell__ die gr√∂√üte Bedeutung zu.

. . .

Grundlage des Relationenmodells ist die Relation, eine zweidimensionale Tabelle mit einer festen Anzahl von Spalten und einer beliebigen Anzahl von Zeilen [@leimeister2021einfuhrung].

. . .

Eine Relation entspricht einem __Entit√§tstypen__, jede Zeile der Tabelle entspricht einer __Entit√§t__, die Spalten einer Tabelle entsprechen den __Attributen__.

# ERM {.vertical-center background-color="blue"}

## Entit√§tstypen

__Entit√§tstypen__ sind reale oder abstrakte Informationsobjekte mit einer eigenst√§ndigen Bedeutung wie Rollen (bspw. Kunde), Organisationseinheiten (bspw. Werk), oder Objekte (bspw. Artikel) [@bachle2021einfuhrung].

. . .

Eine __Entit√§t__ ist eine einzelne, konkrete Auspr√§gung eines Entit√§tstyps (bspw. der Kunde *Hans Dampf*).

. . .

Grafisch werden Entit√§tstyps im Entity Relationship Modell durch Rechtecke repr√§sentiert.

::: notes
*Beispiel: Wesentliche Aufgabe einer Anwendung zur Zeiterfassung ist es, f√ºr die Abrechnung Leistungen von Mitarbeitern zu Projektauftr√§gen zu erfassen. Aus dieser Aufgabenstellung heraus ergeben sich als relevante Entit√§tstyps __Mitarbeiter__ (Rolle), __Leistung__ (reales Objekt), __Auftrag__, und __Projekt__ (abstrakte Informationsobjekte).*
:::

## Attribute

Anhand von Attributen werden __Eigenschaften von Entit√§tstypen__ beschrieben [@bachle2021einfuhrung].

. . .

Ihre konkreten Auspr√§gungen, die __Attributwerte__, definieren eine einzelne Entit√§t.

. . .

Attribute werden durch __Ellipsen__, die durch Linien mit den Rechtecken der entsprechenden Entit√§tstypen verbunden sind, dargestellt.

Attribute, die der eindeutigen Identifikation dienen[^1], sogenannte __Schl√ºsselattribute__, werden unterstrichen.

[^1]: In Schl√ºsselattributen kommt jeder Attributwert nur einmal vor, ist also eindeutig. √úber Schl√ºsselattribute k√∂nnen Entit√§ten eindeutig identifiziert werden.

----

####  Beispiel (Zeiterfassung)

![Entit√§tstypen und Attributen der Zeiterfassungsanwendung](images/entities.svg){#fig-entities}

## Beziehungen

√úber __Beziehungstypen__ werden Verkn√ºpfungen zwischen Entit√§tstypen beschrieben (bspw. Mitarbeiter *leitet* Projekt [@bachle2021einfuhrung].

. . .

Relationen werden in Form von __Rauten__ dargestellt und mit Pr√§dikatsverben bezeichnet.

. . .

Die Bezeichnungen sollen gew√§hlt werden, dass sie auf alle Entit√§ten der verkn√ºpften Entit√§tstypen zutreffen.

----

####  Beispiel (Zeiterfassung)

![Relationen der Zeiterfassungsanwendung](images/relationen.svg){#fig-relationen}

## Kardinalit√§t

Die Kardinalit√§t legt fest, an wie vielen konkreten Beziehungen eine Beziehungstyps seine Entit√§ten beteiligt sein k√∂nnen oder m√ºssen [@bachle2021einfuhrung].

. . .

Grunds√§tzlich lassen sich 1 zu 1 (1:1), 1 zu n (1:n) sowie n zu m (n:m) Beziehungen unterscheiden.

. . .

Je nach Notationsart wird die Kardinalit√§t unterschiedlich dargestellt. So unterscheidet sich die Notation nach Chen wesentlich von der (min;max)-Notation.

----

####  Beispiel (Zeiterfassung)

![Kardinalit√§t in der Notation nach Chen](images/kardinalit%C3%A4t.svg){#fig-kardinalit√§t}

## (min;max)-Notation

In der (min,max)-Notation werden genaue __Unter-und Obergrenzen__ der zul√§ssigen Anzahl Objekte innerhalb einer Beziehung angegeben. Damit wird festgelegt, dass¬†jede¬†Entit√§t dieses Typs mindestens an min und h√∂chstens an max. Beziehungen des Beziehungstyps teilnimmt.

. . .

In der¬†(min,max)-Notation¬†wird die Kardinalit√§t im ER-Modell umgekehrt zu Chen-Notationen positioniert

----

####  Beispiel (Zeiterfassung)

![Kardinalit√§t in der (min;max)-Notation](images/minMax.svg){#fig-minMax}

# Relationenmodell {visibility="hidden"}

F√ºr relationale Datenbanksysteme gilt:

-   Jede Relation ist eine __zweidimensionale Tabelle__. Diese entspricht meistens einem Entit√§tstyp.\
    *m:m-Beziehungen erfordern die Bildung einer eigenen Relation. Die Prim√§rschl√ºssel der beteiligten Entit√§tstyp werden vererbt.*
-   Jede Zeile der Tabelle beschreibt eine bestimmte Entit√§t.
-   Die Spalten entsprechen den Attributen.
-   Die Entit√§ten werden durch Attributwerte, also Auspr√§gungen der Attribute, beschrieben.
-   Die Zeilen m√ºssen paarweise untereinander verschieden sein. Es gibt also keine zwei identischen Zeilen. Um das sicherzustellen ben√∂tigt jede Relation einen Prim√§rschl√ºssel.
-   Die Reihenfolge der Zeilen spielt keine Rolle, ebenso die der Spalten.
-   Attribute sind stets atomar, also nicht in kleinere Einheiten zerlegbar

## Relationen

Eine Relation entspricht (meistens) einem Entit√§tstyps.

![Beispiel einer Relation, vgl. @bachle2021einfuhrung](images/relation.svg){#fig-relation}

::: notes
*Beispiel: Im vorherigen Kapitel wurde das ERM eines Zeiterfassungssystems skizziert. Ein wesentlicher Entit√§tstyps ist das Projekt. Dieser kann mit den Attributen in eine Relation √ºberf√ºhrt werden.*
:::

## 1:1- und 1:n-Beziehungen

Bei 1:1 und 1:n-Beziehungen wird der __Prim√§rschl√ºssel__ der verbundenen Relation erg√§nzt.

![Beispiel einer 1:n Beziehung, vgl. @bachle2021einfuhrung](images/beziehungen.svg)

::: notes
*Beispiel: Ein Projekt wird immer von einem Mitarbeiter geleitet, ein Mitarbeiter kann beliebig viele Projekte (inkl. keines) leiten (1:n-Beziehung). Umgesetzt wird diese Beziehung im Relationenmodell durch die Erweiterung der Relation __Projekt__ um den Prim√§rschl√ºssel der Relation __Mitarbeiter__, der __Mitarbeiter-Nr.__ *

## n:m-Beziehungen

Eine n:m-Beziehung wird durch eine neue Relation realisiert, die sogenannte __Koppeltabelle__.

![Beispiel einer 1:n Beziehung, vgl. @bachle2021einfuhrung](images/koppeltabelle.svg)

::: notes
*Beispiel: Ein Kunde kann mehrere Trainings buchen. Ein Training kann aber auch von mehreren Kunden gebucht werden. In der neuen Relation `Buchungen` stellen die Prim√§rschl√ºssel als Fremdschl√ºssel die Beziehung dar. Die Kombination der Fremdschl√ºssel `Kunden-Nr,` und `Trainings-Nr.` wird zum Prim√§rschl√ºssel der Koppeltabelle `Buchungen`.*
:::

# √úbungen ‚úèÔ∏è {.vertical-center background-color="blue"}

## Daten oder Information

Diskutieren Sie, worin sich die drei Beispiele unten unterscheiden und unter welchen Bedingungen es sich um Daten oder Informationen handelt.

![Daten oder Information?](images/datenInformation.svg){#fig-datenInformation}

## Online-Shop

Sie m√∂chten das Datenmodell f√ºr einen Online-Shop erstellen. √úber den Shop k√∂nnen Kunden Bestellungen aufgeben. Jede Bestellung besteht aus Artikeln. Die Artikel werden von Lieferanten geliefert. Die Artikel k√∂nnen verschiedenen Kategorien zugeordnet werden.

Jeder Kunde hat eine Kundennummer. Zudem werden Name, E-Mail, Bankverbindung und andere Daten gespeichert. Jeder Artikel hat eine Artikel-Nummer, eine Beschreibung, ein Bild und ein Preis. Jede Bestellung hat eine Bestellnummer. Eine Kategorie ist √ºber eine ID und eine Bezeichnung charakterisiert. Ein Lieferant hat in unserem Shop eine Lieferantennummer und einen Namen.

Erstellen Sie das Entity-Relationship Modell. Pr√ºfen Sie, ob jeder Entit√§tstyp ein Schl√ºsselattribut besitzt. Zeichnen Sie sowohl die Kardinalit√§t nach Chen als auch nach der (min;max)-Notation ein.

Leiten Sie aus dem ERM das Relationenmodell ab. Erg√§nzen Sie in jeder Relation zwei Datens√§tze.

## Auftragsverwaltung

In einer Agentur ist jeder Auftrag in Unterauftr√§ge gegliedert. Die Mitarbeiter erfassen die geleisteten Stunden pro Tag und verkn√ºpfen diese mit dem passenden Unterauftrag.

Mitarbeiter haben eine Personalnummer, einen Namen, und einen festgelegten Stundensatz. Jeder Auftrag hat min. die Auftragsnummer, eine Bezeichnung, einen Auftraggeber ein Auftragsdatum. Jeder Unterauftrag hat eine Unterauftragsnummer, eine Bezeichnung und einen festgelegten Sollaufwand. Eine Leistung besteht min. aus der Leistungsnummer, einer Bezeichnung, dem Monat der Leistungserstellung und den Ist-Stunden.

Entwerfen Sie das ER-Modell.

Leiten Sie aus dem ERM das Relationenmodell ab. Erg√§nzen Sie in jeder Relation zwei Datens√§tze.

## Big Data

√úberlegen Sie, wo Ihnen im Alltag Anwendungen begegnen, die Big Data nutzen.

Geben Sie ein Beispiel und erl√§utern Sie anhand der 4+1 Vs weshalb es sich um Big Data handelt.

# Lernkontrolle üßê {visibility="hidden"}

- Daten beschreiben Objekte der realen Welt durch deren Merkmale und deren Beziehung zueinander. Zeigen Sie diese Eigenschaften von Daten anhand eines einfachen ERM.
- Erl√§utern Sie den Unterschied zwischen Stamm- und Bewegungsdaten.
- Geben Sie ein Beispiel f√ºr Datenredundanzen und erl√§utern Sie Probleme, dich sich daraus ergeben (k√∂nnen).
- Worin unterscheiden sich das konzeptionelle Schema vom logischen Datenmodell?
- Weshalb sollten Datenmodelle vor der Erstellung eines Informationssystems erstellt werden?
- Welche Funktion hat ein Schl√ºsselattribut?
- Was ist eine Koppeltabelle und wann wird diese ben√∂tigt?

# Literatur üìö

::: {#refs}
:::
