---
title: "Solution Notes"
subtitle: "üß† Introduction to AI ‚Äî I2AI_4"

format: 
  html:
    output-file: index.html
---

# Introduction

## I2AI_1 E3

To what extent are the following computer systems instances of artificial intelligence:

* Although __bar code scanning__ is in a sense computer vision, these are not AI systems. The problem of reading a bar code is an extremely limited and artificial form of visual interpretation, and it has been carefully designed to be as simple as possible, given the hardware.
* The problem of determining the __relevance of a web page to a query__ is a problem in natural language understanding, and the techniques are related to those we will discuss later. Search engines also use clustering techniques. Likewise, other functionalities provided by a search engines use intelligent techniques; for instance, the spelling corrector uses a form of data mining based on observing users‚Äô corrections of their own spelling errors. On the other hand, the problem of indexing billions of web pages in a way that allows retrieval in seconds is a problem in database design, not in artificial intelligence.
* To a limited extent. __Voice-activated telephone__ menus tend to use vocabularies which are very limited ‚Äì e.g. the digits, ‚ÄúYes‚Äù, and ‚ÄúNo‚Äù ‚Äî and within the designers‚Äô control, which greatly simplifies the problem. On the other hand, the programs must deal with an uncontrolled space of all kinds of voices and accents. Modern digital assistants like Siri and the Google Assistant make more use of artificial intelligence techniques, but still have a limited repetoire.
* __Internet routing algorithms__ are borderline. There is something to be said for viewing these as intelligent agents working in cyberspace. The task is sophisticated, the information available is partial, the techniques are heuristic (not guaranteed optimal), and the state of the world is dynamic. All of these are characteristic of intelligent activities. On the other hand, the task is very far from those normally carried out in human cognition. In recent years there have been suggestions to base more core algorithmic work on machine learning.

## I2AI_1 E5

Read the statements (one after the other) and discuss if the second sentence of each statement is true and if it does imply the first.

> Surely computers cannot be intelligent  
‚Äîthey can do only what their programmers tell them.

  This depends on your definition of ‚Äúintelligent‚Äù and ‚Äútell.‚Äù In one sense computers only do what the programmers command them to do, but in another sense what the programmers consciously tells the computer to do often has very little to do with what the computer actually does. Anyone who has written a program with an ornery bug knows this, as does anyone who has written a successful machine learning program. So in one sense Samuel ‚Äútold‚Äù the computer ‚Äúlearn to play checkers better than I do, and then play that way,‚Äù but in another sense he told the computer ‚Äúfollow this learning algorithm‚Äù and it learned to play. So we‚Äôre left in the situation where you may or may not consider learning to play checkers to be a sign of intelligence (or you may think that learning to play in the right way requires intelligence, but not in this way), and you may think the intelligence resides in the programmer or in the computer.

> Surely animals cannot be intelligent  
‚Äîthey can do only what their genes tell them.

  The point of this exercise is to notice the parallel with the previous one. Whatever you decided about whether computers could be intelligent in 1.11, you are committed to making the same conclusion about animals (including humans), unless your reasons for deciding whether something is intelligent take into account the mechanism (programming via genes versus programming via a human programmer).

> Surely animals, humans, and computers cannot be intelligent  
‚Äîthey can do only what their constituent atoms are told to do by the laws of physics.

  Again, your definition of ‚Äúintelligent‚Äù drives your answer to this question.

# Intelligent Agents

## I2AI_2 E5

For each of the following activities, give a PEAS description of the task environment and characterize it in terms of the properties discussed in class.

*Many of these can actually be argued either way, depending on the level of detail and abstraction.*

__Playing soccer:__ Partially observable, stochastic, sequential, dynamic, continuous, multi-agent.

__Exploring the subsurface oceans of Titan:__ Partially observable, stochastic, sequential, dynamic, continuous, single agent (unless
there are alien life forms that are usefully modeled as agents).

__Shopping for used AI books on the Internet:__ Partially observable, deterministic, sequential, static, discrete, single agent. (it can also be multi-agent and dynamic if we buy books via auction)

__Playing a tennis match:__ Fully observable, stochastic, episodic (every point is separate), dynamic, continuous, multi-agent.

## I2AI_2 E6

For each of the following task environment properties, rank the example task environments from most to least according to how well the environment satisfies the property. 

Lay out any assumptions you make to reach your conclusions. 

a. __Fully observable__: driving; document classification; tutoring a student in calculus; skin cancer diagnosis from images
b. Continuous: driving; spoken conversation; written conversation; climate engineering by stratospheric aerosol injection
c. Stochastic: driving; sudoku; poker; soccer
d. Static: chat room; checkers; tax planning; tennis  


__Fully Observable__: document classification > skin cancer diagnosis from images > driving > tutoring a high-school student in calculus.

- Document classification is a fairly canonical example of a (non-sequential) observable problem, because the correct classification depends almost entirely on the visible text of the document itself. There might be a slight influence from ‚Äúprovenance‚Äù information (date, authorship, etc.) that may not be directly observable. 
- Skin cancer diagnosis can sometimes be done well from an image of the lesion, bot other factors such as patient age, changes in the lesion over time, medical history, and family history can be important. 
- Driving is often considered to be observable because we imagine that we are making decisions based on what we see, but (1) velocity and turn signal status of other vehicles can be judged only from multiple image frames, and (2) assessing the intended actions of other vehicles may require accumulating information over an extended period‚Äîe.g., to determine if a vehicle is stopped or broken down, driving slowly or looking for an address or a parking spot, turning left or has forgotten to turn off the turn signal. Other vehicles, hedges, fog, and so on can obscure visual access to important aspects of the driving environment. 
- Tutoring is almost completely unobservable: what matters is the student‚Äôs level of understanding, learning style, basic math skills, etc. Clues must be gathered over days, weeks, and months.

__Continuous:__ climate engineering > driving > spoken conversation > written conversation. 

- Climate engineering by aerosol injection is quintessentially continuous: the engineer must decide how much to inject, where, and when, and all of these are continuous quantities. 
- The control actions of driving are mostly continuous (steering, acceleration/ braking) but there are discrete elements (turn signal, headlights). More importantly, the problem is usually handled using discrete high-level actions (change lanes left, take exit, etc.) that have implementations as continuous control problems. This kind of discrete/ continuous hierarchy is very common; playing chess in the physical world is a perfect example.
- Spoken conversation is closer to chess than driving: roughly speaking, we choose the discrete words to say and delegate the saying to continuous motor control routines. Prosody (volume, pitch, and speed variation) is, however, an important continuous element in how we speak that is largely absent from written communication.

__Stochastic:__ poker > soccer > driving > sudoku.

- In poker, nearly everything is determined by the fall of the cards, which is entirely stochastic from the viewpoint of the players. 
- Both soccer and driving contain elements that are fairly deterministic, such as the flight of the ball and the response of the engine, and elements that are stochastic, such as tire punctures and the outcomes of tackles. Yet typically one can make reasonably reliable driving plans over many minutes, whereas it is essentially impossible to predict the state of a soccer game one minute into the future.
Sudoku, of course, is entirely deterministic.

__Static:__ tax planning > checkers > chat room > tennis.

- While no human activity is completely static, given the finite length of our lifetimes, tax planning comes close‚Äîthe typical ‚Äúdeadline‚Äù to get it done is often weeks or months, and the relevant aspects of the environment (life/death, number of offspring, tax law) may change even more slowly. 
- In checkers, the world state doesn‚Äôt change until someone moves, but the clock ticks so the problem is semi-dynamic.
- In the chat room, long delays in replying are unacceptable, so it is a fairly real-time environment, but not nearly as real-time as tennis, where a delay of a split second often makes the difference between winning and losing a point.

# Search

## I2AI_3 E3

Your goal is to navigate a robot out of a maze. It starts in the center of the maze facing north. You can turn the robot to face north, east, south, or west; direct the robot to move forward a certain distance (it will stop before a wall). 

a. Formulate this problem. How large is the state space?
b. In navigating a maze, the only place we need to turn is at the intersection of two or more corridors. Reformulate this problem using this observation. How large is the state space now?
c. From each point in the maze, we can move in any of the four directions until we reach a turning point, and this is the only action we need to do. Reformulate the problem using these actions. Do we need to keep track of the robot‚Äôs orientation now?
d. In our initial description of the problem we already abstracted from the real world. Name three such simplifications we made.

#### Problem statement

- The center of the maze is at (0; 0), and the maze itself is a square from (-1;-1) to (1; 1).
- __Initial state:__ robot at coordinate (0; 0), facing North.
- __Goal test:__ either jxj > 1 or jyj > 1 where (x; y) is the current location.
- __Successor function:__ move forwards any distance d; change direction robot it facing.
- __Cost function:__ total distance moved.

The state space is infinitely large, since the robot‚Äôs position is continuous.

### Reformulated problem statement

The state will record the intersection the robot is currently at, along with the direction it‚Äôs facing. At the end of each corridor leaving the maze we will have an exit node. We‚Äôll assume some node corresponds to the center of the maze.

- __Initial state:__ at the center of the maze facing North.
- __Goal test:__ at an exit node.
- __Successor function:__ move to the next intersection in front of us, if there is one; turn to face a new direction.
- __Cost function:__ total distance moved.

There are 4n states, where n is the number of intersections.

### Reformulated problem statement #2

- __Initial state:__ at the center of the maze.
- __Goal test:__ at an exit node.
- __Successor function:__ move to next intersection to the North, South, East, or West.
- __Cost function:__ total distance moved.

We no longer need to keep track of the robot‚Äôs orientation since it is irrelevant to predicting the outcome of our actions, and not part of the goal test. The motor system that executes this plan will need to keep track of the robot‚Äôs current orientation, to know when to rotate the robot.

#### Abstractions

State:

- Ignoring the height of the robot off the ground, whether it is tilted off the vertical.
-  The robot can face in only four directions.
- Other parts of the world ignored: possibility of other robots in the maze, the weather in the Caribbean.

Action:

- We assumed all positions we safely accessible: the robot couldn‚Äôt get stuck or damaged.
- The robot can move as far as it wants, without having to recharge its batteries.
- Simplified movement system: moving forwards a certain distance, rather than controlled each individual motor and watching the sensors to detect collisions.

# Games

## I2AI_4 E2

#### Completeness

Explain if the `MINIMAX` algorithm is complete and optimal. 

  In two-player, discrete, deterministic, turn-taking zero-sum gamges with perfect information, the `MINIMAX` algorithm can select optimal moves by a depth-first emuration, the algorithm is also guaranteed to find a solution when there is one.

  The algorithm performas a complete depth-first exploration of the game tree. If the maximum depth of the tree is $m$ and there are $b$ legal moves at each point, then the time complexity is $O(b^m)$ for an algorithm that generates all actions at once, or $O(m)$ for an algorithm that generates actions on at a time. The exponential complexity makes `MINIMAX` impractical for complex games. `MINIMAX` does, however, serve as a basis for the mathematical analysis for games. By approximating the minimax analysis in various ways, we can derive more practical algorithms.

#### Suboptimally play

Can it be beaten by an opponent playing suboptimally? Why (not)?

If *MIN* does not play optimally, then *MAX* will do at least as well as against an optimal player, possibly better.

## I2AI_4 E3

Read the note about pruning (and consult @RusselNorvig2022AIMA if necessary). 

Explain in your own words, under what conditions a subtree is skipped using Alpha-beta pruning.

Draw an example (game search tree, 3 levels depth).

![Example for pruning](images/pruning.svg){#fig-pruning}

@fig-pruning: There is no point in looking at the other successor states of *C*, thus it can be skipped.