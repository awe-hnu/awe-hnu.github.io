{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Decision Trees\"\n",
        "subtitle: \"Introduction to AI (I2AI)\"\n",
        "lang: en\n",
        "categories: [\"Lecture Notes\"]\n",
        "\n",
        "bibliography: ../assets/literature.bib\n",
        "\n",
        "date: \"05.09.2025\"\n",
        "\n",
        "title-slide-attributes:\n",
        "  data-background-image: ../assets/bg.jpeg\n",
        "  data-background-size: cover\n",
        "  data-background-opacity: \"1\"\n",
        "  data-background-color: '#0333ff'\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    output-file: index.html\n",
        "    margin-header: | \n",
        "      [Slides](slides.html){.btn .btn-primary target=\"blank\"}\n",
        "    format-links: false  \n",
        "  presentation-revealjs:\n",
        "    output-file: slides.html\n",
        "    include-before-body: ../assets/footer.html\n",
        "    \n",
        "---\n",
        "\n",
        "# Introduction {.vertical-center .headline-only background-color=\"#564ac6\" background-image=\"../assets/bg.jpeg\"}\n",
        "\n",
        "## Importance\n",
        "\n",
        ":::medium\n",
        "Decision trees are a **fundamental concept in knowledge-based AI agents** as they ...\n",
        ":::\n",
        "\n",
        ":::incremental\n",
        "- represent a function that maps attribute values to a decision (i.e., transition model),\n",
        "- use search to find a decision through a sequence of tests, and\n",
        "- create a model that is inherently explainable.\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "They constitute a critical part of the AI toolkit by offering both **predictive power** and **interpretability**.\n",
        "\n",
        ":::notes\n",
        "Decision trees represent one of the earliest successful machine learning algorithms. Despite newer approaches like deep learning, they remain important due to their explainability and simplicity. Further, decision trees form the foundation of more advanced ensemble methods like Random Forests and Gradient Boosting.\n",
        ":::\n",
        "\n",
        "## Advantages {visibility=hidden} \n",
        "\n",
        "Despite being older than many modern ML algorithms, decision trees remain popular due to two key advantages:\n",
        "\n",
        ":::incremental\n",
        "- **Simplicity**: Easy to understand and implement\n",
        "- **Explainability**: For a given input, the model not only outputs a decision but explains *why* this decision was made\n",
        ":::\n",
        "\n",
        ":::notes\n",
        "Particularly explainability is crucial in fields requiring transparency such as medical diagnosis, financial decision-making, insurance risk assessment, and autonomous driving systems. Here \"black box\" models are problematic. A decision tree can show exactly which features led to a particular decision, making it easier to validate, audit, and explain to stakeholders or regulators.\n",
        ":::\n",
        "\n",
        "## Recap: Structure\n",
        "\n",
        ":::medium\n",
        "A decision tree is a representation of a function that maps a vector of attribute values to a single output value (i.e., a \"decision\").\n",
        ":::\n",
        "\n",
        ":::incremental\n",
        "- An **internal node** represents a test of a property\n",
        "- **Branches** are labeled with possible values of the test\n",
        "- Each **leaf node** specifies the value to be returned if that leaf is reached\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "In Boolean decision trees, the input is a set of vector of input attributes *X* and a single Boolean output value *y*.\n",
        "\n",
        ":::notes\n",
        "Decision trees can handle both classification (discrete output) and regression (continuous output) tasks, though they are more commonly used for classification. The structure naturally leads to \"if-then-else\" rule sets that are easy to follow.\n",
        ":::\n",
        "\n",
        "## Example: Restaurant Decision\n",
        "\n",
        "Consider deciding whether to wait for a table at a restaurant [@RusselNorvig2022AIMA, p. 668].\n",
        "\n",
        ". . .\n",
        "\n",
        "The output $y$ is a Boolean variable $WillWait$.\n",
        "\n",
        ". . .\n",
        "\n",
        "The input $x$ is a vector of ten attributes with discrete values:\n",
        "\n",
        "::::smaller\n",
        ":::incremental\n",
        "- **Alternate** -- Is there an alternative? (T/F)\n",
        "- **Bar** -- Does the restaurant have a bar to wait in? (T/F)\n",
        "- **Fri** -- Is it Friday or Saturday? (T/F)\n",
        "- **Hungry** -- Am I hungry? (T/F)\n",
        "- **Patrons** -- How many guests are there? (none, some, full)\n",
        "- **Price** -- How expensive is the food? (€, €€, €€€)\n",
        "- **WaitEstimate** -- How long do we have to wait? (0-10, 10-30, 30-60, >60)\n",
        "- **Reservation** -- Have I made a reservation? (T/F)\n",
        "- **Raining** -- Is it raining outside? (T/F)\n",
        "- **Type** -- What kind of restaurant is it? (French, Italian, Thai, Burger)\n",
        ":::\n",
        "::::\n",
        "\n",
        "----\n",
        "\n",
        "[**Example decision tree**]{.h4}\n",
        "\n",
        "![Decision tree restaurant example based on @RusselNorvig2022AIMA [p. 674]](images/decision-tree.svg){#fig-tree}\n",
        "\n",
        "----\n",
        "\n",
        "[**Underlying training set**]{.h4}\n",
        "\n",
        ":::smaller\n",
        ":::column-page-inset-right \n",
        "| Example | Alt   | Bar   | Fri   | Hun   | Pat    | Price   | Rain   | Res   | Type     | Est       | WillWait     |\n",
        "|:--------|:-----:|:-----:|:-----:|:-----:|:------:|:-------:|:------:|:-----:|:--------:|:---------:|:------------:|\n",
        "| $x_1$   | Yes | No  | No  | Yes | Some | €€€   | No   | Yes | French  | 0-10  | $y_1 =$ Yes  |\n",
        "| $x_2$   | Yes | No  | No  | Yes | Full | €     | No   | No  | Thai    | 30-60 | $y_2 =$ No   |\n",
        "| $x_3$   | No  | Yes | No  | No  | Some | €     | No   | No  | Burger  | 0-10  | $y_3 =$ Yes  |\n",
        "| $x_4$   | Yes | No  | Yes | Yes | Full | €     | Yes  | No  | Thai    | 10-30 | $y_4 =$ Yes  |\n",
        "| $x_5$   | Yes | No  | Yes | No  | Full | €€€   | No   | Yes | French  | \\>60  | $y_5 =$ No   |\n",
        "| $x_6$   | No  | Yes | No  | Yes | Some | €€    | Yes  | Yes | Italian | 0-10  | $y_6 =$ Yes  |\n",
        "| $x_7$   | No  | Yes | No  | No  | None | €     | Yes  | No  | Burger  | 0-10  | $y_7 =$ No   |\n",
        "| $x_8$   | No  | No  | No  | Yes | Some | €€    | Yes  | Yes | Thai    | 0-10  | $y_8 =$ Yes  |\n",
        "| $x_9$   | No  | Yes | Yes | No  | Full | €     | Yes  | No  | Burger  | \\>60  | $y_9 =$ No   |\n",
        "| $x_{10}$  | Yes | Yes | Yes | Yes | Full | €€€   | No   | Yes | Italian | 10-30 | $y_{10}=$ No  |\n",
        "| $x_{11}$  | No  | No  | No  | No  | None | €     | No   | No  | Thai    | 0-10  | $y_{11} =$ No  |\n",
        "| $x_{12}$  | Yes | Yes | Yes | Yes | Full | €     | No   | No  | Burger  | 30-60 | $y_{12} =$ Yes |\n",
        ": Examples for the restaurant domain {#tbl-res-ts}\n",
        ":::\n",
        ":::\n",
        "\n",
        ":::notes\n",
        "Note how even with just 12 training examples, we can create a meaningful decision tree. The table shows various scenarios with their attributes and whether the person decided to wait. The decision tree we'll learn will try to capture the patterns in this data.\n",
        ":::\n",
        "\n",
        "## Decision-Tree Types\n",
        "\n",
        "Decision trees can be structured in two ways:\n",
        "\n",
        ". . .\n",
        "\n",
        "[**Binary Decision Trees**]{.h4}\n",
        "\n",
        "Each node has exactly two branches (True/False)\n",
        "\n",
        ":::incremental\n",
        "- For numeric features: \"Is X ≤ threshold?\" (e.g., \"Pages Viewed ≤ 20?\")\n",
        "- For categorical features: \"Is X = value?\" (e.g., \"Referrer = Slashdot?\")\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "[**Non-Binary Decision Trees**]{.h4}\n",
        "\n",
        "Categorical nodes can have multiple branches\n",
        "\n",
        ":::incremental\n",
        "- Each branch corresponds to one possible value\n",
        "- Often visually simpler but computationally less efficient\n",
        ":::\n",
        "\n",
        ":::notes\n",
        "Binary trees are usually more efficient in implementation since they map directly to if-then-else statements in code. Non-binary trees require switch-case logic which can be less efficient. However, non-binary trees can be more intuitive for categorical features with many values.\n",
        "\n",
        "---\n",
        "\n",
        "```{mermaid}\n",
        "%%| fig-cap: \"Comparison of binary and non-binary decision trees\"\n",
        "%%| fig-width: 6\n",
        "%%| fig-height: 2\n",
        "\n",
        "graph LR\n",
        "    %% Binary Decision Tree\n",
        "    B1[Color?] --> B2[Red?]\n",
        "    B2 -->|Yes| B5[Red]\n",
        "    B2 -->|No| B3[Green?]\n",
        "    B3 -->|Yes| B6[Green]\n",
        "    B3 -->|No| B7[Other]\n",
        "    \n",
        "    %% Non-Binary Decision Tree\n",
        "    N1[Color?] -->|Red| N2[Red]\n",
        "    N1 -->|Green| N3[Green]\n",
        "    N1 -->|Blue| N4[Blue]\n",
        "    N1 -->|Other| N5[Other]\n",
        "    \n",
        "    %% Styling\n",
        "    classDef default font-family:Arial,font-size:10px;\n",
        "    linkStyle default stroke-width:1px,font-family:Arial,font-size:8px;\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "# Learning Decision Trees {.headline-only}\n",
        "\n",
        "\n",
        "## Exercise {.discussion-slide .no-headline .html-hidden}\n",
        "\n",
        "Given the following 2D data with three classes (red, green, blue), construct a decision tree with depth 3 that separates the classes as effectively as possible.\n",
        "\n",
        ":::figHeight"
      ],
      "id": "56cc570c"
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-width": 5,
        "fig-height": 5
      },
      "source": [
        "#| label: fig-train-points-py\n",
        "#| fig-cap: Training data points with three classes (red, green, blue)\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.font_manager import FontProperties\n",
        "import matplotlib as mpl\n",
        "\n",
        "# Set seed for reproducibility\n",
        "np.random.seed(123)\n",
        "\n",
        "# Create data for each class\n",
        "# Class 1 (red) - Bottom-left and some in top-right\n",
        "x1_red = np.concatenate([np.random.normal(30, 10, 15), np.random.normal(70, 10, 5)])\n",
        "x2_red = np.concatenate([np.random.normal(30, 10, 15), np.random.normal(70, 10, 5)])\n",
        "\n",
        "# Class 2 (green) - Top-left\n",
        "x1_green = np.random.normal(30, 10, 20)\n",
        "x2_green = np.random.normal(70, 10, 20)\n",
        "\n",
        "# Class 3 (blue) - Right half\n",
        "x1_blue = np.random.normal(70, 10, 20)\n",
        "x2_blue = np.random.uniform(20, 80, 20)\n",
        "\n",
        "# Set up the plot\n",
        "plt.figure(figsize=(5, 5))\n",
        "\n",
        "# Plot each class\n",
        "plt.scatter(x1_red, x2_red, color='red', s=50, label='Class 1')\n",
        "plt.scatter(x1_green, x2_green, color='green', s=50, label='Class 2')\n",
        "plt.scatter(x1_blue, x2_blue, color='blue', s=50, label='Class 3')\n",
        "\n",
        "# Add decision boundaries \n",
        "plt.axvline(x=50, linestyle='--', color='black', alpha=0.7)\n",
        "plt.axhline(y=50, xmax=0.5, linestyle='--', color='black', alpha=0.7)\n",
        "\n",
        "# Formatting\n",
        "plt.xlim(0, 100)\n",
        "plt.ylim(0, 100)\n",
        "plt.xticks(np.arange(0, 101, 20))\n",
        "plt.yticks(np.arange(0, 101, 20))\n",
        "plt.xlabel('$x_1$', fontsize=12, fontweight='bold')\n",
        "plt.ylabel('$x_2$', fontsize=12, fontweight='bold')\n",
        "plt.grid(True, alpha=0.3)\n",
        "\n",
        "# Use Arial font if available\n",
        "try:\n",
        "    plt.rcParams['font.family'] = 'Arial'\n",
        "except:\n",
        "    pass\n",
        "\n",
        "# Remove legend and tight layout\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-train-points-py",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "-------\n",
        "\n",
        "[**Solution to the decision tree exercise**]{.h4}\n",
        "\n",
        "```{mermaid}\n",
        "%%| fig-width: 7\n",
        "%%| fig-height: 4\n",
        "\n",
        "graph TD\n",
        "    A[Root Node<br>x₁ ≤ 50?] -->|Yes| B[x₂ ≤ 50?]\n",
        "    A -->|No| C[Class: Blue]\n",
        "    \n",
        "    B -->|Yes| D[Class: Red]\n",
        "    B -->|No| E[Class: Green]\n",
        "    \n",
        "    classDef default font-family:Arial,font-size:14px;\n",
        "    classDef redClass fill:#ffcccc,stroke:#ff0000,color:#cc0000,font-family:Arial;\n",
        "    classDef greenClass fill:#ccffcc,stroke:#00cc00,color:#006600,font-family:Arial;\n",
        "    classDef blueClass fill:#ccccff,stroke:#0000ff,color:#0000cc,font-family:Arial;\n",
        "    \n",
        "    class D redClass;\n",
        "    class E greenClass;\n",
        "    class C blueClass;\n",
        "```\n",
        "\n",
        "## Inducing Trees\n",
        "\n",
        "To get a **naive solution**, we could simply construct a tree with one path to a leaf for each example.\n",
        "\n",
        ":::incremental\n",
        "- We test all the attributes along the path and attach the classification of the example to the leaf\n",
        "- This correctly classifies all examples but doesn't generalize\n",
        "- It just memorizes the observations\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "How can we find a tree that is:\n",
        "\n",
        ":::incremental\n",
        "1. __Consistent__ with the training set, and\n",
        "2. __small as possible__ to promote generalization?\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "It's __intractable__ to find the smallest consistent tree, but __decision tree learning__ algorithms use greedy heuristics to efficiently find a reasonably small tree.\n",
        "\n",
        "## Divide-and-Conquer Strategy\n",
        "\n",
        "Decision tree learning adopts a greedy divide-and-conquer approach:\n",
        "\n",
        ":::incremental\n",
        "1. Select the *most important* attribute to test at the root\n",
        "2. Divide the training set into subsets corresponding to each value of that attribute\n",
        "3. Recursively apply the same process to each subset\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "The goal is to reach the __correct classification__ with a __small number of tests__, creating a tree that is both __accurate__ and __shallow__.\n",
        "\n",
        ". . .\n",
        "\n",
        "But how do we determine which attribute is *most important*?\n",
        "\n",
        ":::notes\n",
        "The divide-and-conquer strategy is how we avoid the exponential complexity of finding the optimal tree. By making locally optimal choices at each step, we hope to get a globally good (if not optimal) solution.\n",
        ":::\n",
        "\n",
        "## Entropy\n",
        "\n",
        "\n",
        "Entropy comes from information theory and measures the unpredictability of a random variable. In the context of decision trees, we're interested in the entropy of the class label. When entropy is high, the classes are mixed. When entropy is zero, we have a pure node with only one class present.\n",
        "\n",
        ". . .\n",
        "\n",
        "Formal: For a random variable $X$ with possible values $V(X)$:\n",
        "\n",
        "$$H(X) = - \\sum\\limits_{x \\in V(X)} p_x \\cdot \\log_2 (p_x)$$\n",
        "\n",
        "where $p_x$ is the probability that $X$ has value $x$.\n",
        "\n",
        ":::incremental\n",
        "- $0 \\leq H(X) \\leq \\log_2 (|V(X)|)$[^1]\n",
        "- $H(X) = 0$ means complete certainty\n",
        "- Maximum value occurs when all outcomes are equally likely\n",
        ":::\n",
        "\n",
        "[^1]: $\\log_2 (|V(X)|)$ describes the upper bound of entropy — the maximum possible entropy for a random variable $X$ is $\\log_2 (|V(X)|)$\n",
        "\n",
        ":::notes\n",
        "\n",
        ":::{.callout-note}\n",
        "\n",
        "#### Examples of maximum entropy\n",
        "\n",
        "For different random variables, the maximum entropy depends on how many values they can take:\n",
        "\n",
        "- Binary variable (e.g., yes/no decision):\\\n",
        "  $\\max H(X) = \\log_2(2) = 1$ bit\\\n",
        "  Achieved when $P(X=\\text{yes}) = P(X=\\text{no}) = 0.5$\n",
        "- Variable with 4 possible values (e.g., suit of a card):\\\n",
        "  $\\max H(X) = \\log_2(4) = 2$ bits\\\n",
        "  Achieved when each value has probability 0.25\n",
        "- Variable with 8 possible values:\\\n",
        "  $\\max H(X) = \\log_2(8) = 3$ bits\n",
        "\n",
        "This upper bound is significant in decision tree learning because:\n",
        "\n",
        "- It tells us the maximum uncertainty possible in a node given the number of classes\n",
        "- It provides a reference point for measuring information gain\n",
        "- It helps us understand when a split is most effective (high reduction from maximum entropy)\n",
        "\n",
        "The difference between the actual entropy and this maximum value indicates how much \"structure\" or \"information\" is already present in the data.\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "### Example {.scrollable}\n",
        "\n",
        "Bob is deciding whether to go skiing based on three factors:\\\n",
        "*snow nearby*, *weekend*, and *sunny day*.\n",
        "\n",
        "| **Snow near** | **Weekend** | **Sun** | **Go Skiing** |\n",
        "|:-------------:|:-----------:|:-------:|:-------------:|\n",
        "| yes           | yes         | yes     | yes           |\n",
        "| yes           | yes         | yes     | yes           |\n",
        "| yes           | yes         | no      | yes           |\n",
        "| yes           | no          | yes     | yes           |\n",
        "| no            | yes         | yes     | yes           |\n",
        "| no            | yes         | yes     | yes           |\n",
        "| no            | yes         | yes     | no            |\n",
        "| no            | yes         | no      | no            |\n",
        "| no            | no          | yes     | no            |\n",
        "| no            | no          | yes     | no            |\n",
        "| no            | no          | no      | no            |\n",
        "\n",
        ":Data from his past decisions {#tbl-data}\n",
        "\n",
        "What is the entropy of the class label *Go Skiing*?\n",
        "\n",
        "\n",
        "-----\n",
        "\n",
        "The entropy of the class label *Go Skiing* is:\n",
        "\n",
        "$$H(D) = -(\\frac{6}{11} \\cdot \\log_2(\\frac{6}{11}) +  \\frac{5}{11} \\cdot \\log_2(\\frac{5}{11})) = 0.994$$\n",
        "\n",
        "The class label *Go Skiing* has probability 6/11 for *yes* and 5/11 for *no*. The resulting entropy is close to 1, indicating high uncertainty (the maximum entropy for a binary variable is 1).\n",
        "\n",
        "## Information Gain\n",
        "\n",
        "__Information gain__ measures how much the entropy decreases when we split the data based on a particular attribute.\n",
        "\n",
        ". . .\n",
        "\n",
        "Formal: for a dataset $D$ and attribute $X$:\n",
        "\n",
        "$$G(D,X) = H(D) - \\sum\\limits_{x \\in V(X)} \\frac{|D_x|}{|D|} H(D_x)$$\n",
        "\n",
        "where:\n",
        "\n",
        "- $H(D)$ is the entropy of the original dataset\n",
        "- $D_x$ is the subset of $D$ where attribute $X$ has value $x$\n",
        "- $|D_x|$ is the size of subset $D_x$\n",
        "- $H(D_x)$ is the entropy of subset $D_x$\n",
        "\n",
        ". . .\n",
        "\n",
        "The attribute with the highest information gain is the *most important* attribute.\n",
        "\n",
        "\n",
        "### Example \n",
        "\n",
        "For Bob's skiing data, let's calculate the information gain for the *Snow near* attribute.\n",
        "\n",
        ". . .\n",
        "\n",
        "First, split the data based on *Snow near\"*:\n",
        "\n",
        "- $D_{yes}$ (4 examples, all *Go Skiing* = yes, entropy = 0)\n",
        "- $D_{no}$ (7 examples, 2 yes and 5 no, entropy = 0.863)\n",
        "\n",
        ". . .\n",
        "\n",
        "The information gain is:\n",
        "\n",
        "$G(D,\\text{Snow near}) = 0.994 - \\frac{4}{11} \\cdot 0 - \\frac{7}{11} \\cdot 0.863 = 0.445$\n",
        "\n",
        "Similarly, we can calculate:\n",
        "\n",
        "- $G(D,\\text{Weekend}) = 0.150$\n",
        "- $G(D,\\text{Sun}) = 0.049$\n",
        "\n",
        ". . .\n",
        "\n",
        "Since \"Snow near\" has the highest information gain, we select it as the root node.\n",
        "\n",
        ":::notes\n",
        "This example shows the complete information gain calculation for one attribute. We first split the data based on whether there is snow nearby, calculate the entropy of each subset, and then determine how much entropy decreased overall. We do the same for the other attributes and select the one with the highest gain.\n",
        ":::\n",
        "\n",
        "## Building the Tree\n",
        "\n",
        "After selecting *Snow near* as our root, we continue the process recursively for each subset.\n",
        "\n",
        "For $D_{yes}$ (all examples have *Go Skiing* = yes):\\\n",
        "This is a pure node, so we're done with this branch\n",
        "\n",
        ". . .\n",
        "\n",
        "For $D_{no}$ (mixed yes and no):\n",
        "\n",
        ":::incremental\n",
        "- Calculate information gain for remaining attributes on this subset\n",
        "- *Weekend* has higher gain (0.292) than *Sun* (0.169)\n",
        "- Split on *Weekend*\n",
        "- Continue recursively ...\n",
        ":::\n",
        "\n",
        "\n",
        "-----\n",
        "\n",
        "```{mermaid}\n",
        "\n",
        "%%| fig-cap: \"Decision tree for Bob's skiing decisions\"\n",
        "%%| fig-width: 8\n",
        "%%| fig-height: 6\n",
        "\n",
        "graph TD\n",
        "    A[\"Snow near?\"] -->|Yes| B[\"Yes\"]\n",
        "    A -->|No| C[\"Weekend?\"]\n",
        "    C -->|Yes| D[\"Sun?\"]\n",
        "    C -->|No| E[\"No\"]\n",
        "    D -->|Yes| F[\"(2 Yes, 1 No)\"]\n",
        "    D -->|No| G[\"No\"]\n",
        "    \n",
        "    %% Apply Arial font to all elements including edges\n",
        "    classDef default font-family:Arial,font-size:14px;\n",
        "    linkStyle default font-family:Arial,font-size:12px,fill:none,stroke-width:1px;\n",
        "    \n",
        "    %% Node styling\n",
        "    classDef decision fill:#f9f9f9,stroke:#333,stroke-width:1px,font-family:Arial;\n",
        "    classDef yes fill:#d4f4d4,stroke:#060,stroke-width:1px,color:#060,font-family:Arial;\n",
        "    classDef no fill:#f4d4d4,stroke:#600,stroke-width:1px,color:#600,font-family:Arial;\n",
        "    classDef mixed fill:#f4f4d4,stroke:#660,stroke-width:1px,color:#660,font-family:Arial;\n",
        "    \n",
        "    class A,C,D decision;\n",
        "    class B,F yes;\n",
        "    class E,G no;\n",
        "    class F mixed;\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "## Gini Impurity\n",
        "\n",
        "Instead of information gain, the __Gini impurity__ is another common criterion that measures the probability of incorrectly classifying a randomly chosen element if it were randomly labeled according to the class distribution in a subset:\n",
        "\n",
        "$$\\text{Gini}(X) = \\sum\\limits_{x \\in V(X)} p_x(1-p_x)$$\n",
        "\n",
        "Where $V(X)$ are the class values in node $X$ and $p_x$ is the probability of class $x$.\n",
        "\n",
        ". . .\n",
        "\n",
        "Properties:\n",
        "\n",
        "- Measures the probability of misclassifying a randomly chosen element\n",
        "- 0 means all elements belong to the same class\n",
        "- Maximum value occurs when classes are equally likely\n",
        "- A lower Gini value indicates a \"purer\" node (more homogeneous)\n",
        "- Often used in CART (Classification and Regression Trees) algorithm\n",
        "\n",
        ":::notes\n",
        "Gini impurity is another common splitting criterion, especially in the CART algorithm. While entropy measures uncertainty, Gini measures the expected error rate if we randomly classify according to the distribution in the node. In practice, both metrics often yield similar trees, though Gini can be computationally more efficient since it doesn't use logarithms.\n",
        ":::\n",
        "\n",
        "## Numerical Attributes\n",
        "\n",
        "For numerical attributes:\n",
        "\n",
        ":::incremental\n",
        "1. Sort the values of the attribute in the training set\n",
        "2. Consider all possible thresholds between adjacent values\n",
        "3. Calculate information gain for each threshold\n",
        "4. Select the threshold with the highest information gain\n",
        ":::\n",
        "\n",
        ":::notes\n",
        "Handling numerical attributes is a key extension to the basic algorithm. Rather than treating each unique numeric value as a separate category, we find the optimal binary split point. This is done by sorting the values and testing each potential threshold between adjacent values. The threshold that maximizes information gain is selected.\n",
        ":::\n",
        "\n",
        "### Example {visibility=\"hidden\"}\n",
        "\n",
        "Let's extend Bob's skiing decision scenario by adding a numerical attribute: **Snow Depth** (in cm).\n",
        "\n",
        "| **Snow Depth** | **Weekend** | **Sun** | **Go Skiing** |\n",
        "|:--------------:|:-----------:|:-------:|:-------------:|\n",
        "| 25             | yes         | yes     | yes           |\n",
        "| 30             | yes         | yes     | yes           |\n",
        "| 15             | yes         | no      | yes           |\n",
        "| 35             | no          | yes     | yes           |\n",
        "| 5              | yes         | yes     | yes           |\n",
        "| 8              | yes         | yes     | yes           |\n",
        "| 3              | yes         | yes     | no            |\n",
        "| 2              | yes         | no      | no            |\n",
        "| 0              | no          | yes     | no            |\n",
        "| 1              | no          | yes     | no            |\n",
        "| 0              | no          | no      | no            |\n",
        "\n",
        "#### Finding the Optimal Split for *Snow Depth*\n",
        "\n",
        "For numerical attributes like *Snow Depth*, we need to:\n",
        "\n",
        "1. **Sort the values**: 0, 0, 1, 2, 3, 5, 8, 15, 25, 30, 35\n",
        "2. **Consider all possible thresholds** between adjacent values\n",
        "3. **Calculate information gain** for each threshold\n",
        "4. **Select the threshold** with the highest information gain\n",
        "\n",
        "For simplicity, let's calculate the information gain for just one threshold: ***Snow Depth* ≤ 10 cm**\n",
        "\n",
        "This splits our data into:\n",
        "\n",
        "- **Snow Depth ≤ 10 cm**: 7 examples (2 \"yes\", 5 \"no\")\n",
        "- **Snow Depth > 10 cm**: 4 examples (4 \"yes\", 0 \"no\")\n",
        "\n",
        "#### Calculating Information Gain\n",
        "\n",
        "1. **Original entropy**:\n",
        "   $H(D) = - \\left( \\frac{6}{11} \\log_2 \\frac{6}{11} +  \\frac{5}{11} \\log_2 \\frac{5}{11} \\right) = 0.994$\n",
        "\n",
        "2. **Entropy after splitting on Snow Depth ≤ 10 cm**:\n",
        "   - $H(D_{\\leq 10}) = - \\left( \\frac{2}{7} \\log_2 \\frac{2}{7} +  \\frac{5}{7} \\log_2 \\frac{5}{7} \\right) = 0.863$\n",
        "   - $H(D_{> 10}) = - \\left( \\frac{4}{4} \\log_2 \\frac{4}{4} +  \\frac{0}{4} \\log_2 \\frac{0}{4} \\right) = 0$\n",
        "     (Note: $0 \\log_2 0$ is defined as 0 in entropy calculations)\n",
        "\n",
        "3. **Weighted average entropy after split**:\n",
        "   $\\frac{7}{11} \\cdot 0.863 + \\frac{4}{11} \\cdot 0 = 0.549$\n",
        "\n",
        "4. **Information gain**:\n",
        "   $G(D, \\text{Snow Depth} \\leq 10) = 0.994 - 0.549 = 0.445$\n",
        "\n",
        "#### Resulting Decision Tree\n",
        "\n",
        "```{mermaid}\n",
        "%%| fig-cap: \"Decision tree with numerical attribute (Snow Depth)\"\n",
        "\n",
        "graph TD\n",
        "    A[\"Snow Depth ≤ 10 cm?\"] -->|Yes| B[\"Weekend?\"]\n",
        "    A -->|No| C[\"Go Skiing: Yes\"]\n",
        "    B -->|Yes| D[\"Sun?\"]\n",
        "    B -->|No| E[\"Go Skiing: No\"]\n",
        "    D -->|Yes| F[\"Go Skiing: Yes/No<br>(2 Yes, 1 No)\"]\n",
        "    D -->|No| G[\"Go Skiing: No\"]\n",
        "    \n",
        "\n",
        "    classDef default font-family:Arial,font-size:14px;\n",
        "    linkStyle default font-family:Arial,font-size:12px,fill:none,stroke-width:1px;\n",
        "    \n",
        "    classDef decision fill:#f9f9f9,stroke:#333,font-familiy:arial;\n",
        "    classDef yes fill:#d4f4d4,stroke:#060,color:#060,font-familiy:arial;\n",
        "    classDef no fill:#f4d4d4,stroke:#600,color:#600,font-familiy:arial;\n",
        "    classDef mixed fill:#f4f4d4,stroke:#660,color:#660,font-familiy:arial;\n",
        "    \n",
        "    class A,B,D decision;\n",
        "    class C yes;\n",
        "    class E,G no;\n",
        "    class F mixed;\n",
        "```\n",
        "\n",
        "#### Key Insights\n",
        "\n",
        "1. **Continuous range to binary decision**:\\\n",
        "  The numerical attribute *Snow Depth* has been converted into a binary decision (≤10 cm or >10 cm)\n",
        "2. **Threshold selection**:\\\n",
        "  We would typically calculate information gain for all possible thresholds and select the one with the highest gain. For example, we might also check *Snow Depth* ≤ 4 cm or *Snow Depth* ≤ 20 cm\n",
        "3. **Multiple splits possible**:\\\n",
        "  The same numerical attribute can be used multiple times in a decision tree with different thresholds (e.g., first split on *Snow Depth* ≤ 10 cm and later split on *Snow Depth* ≤ 5 cm)\n",
        "\n",
        "In this example, *Snow Depth* ≤ 10 cm provides the same information gain (0.445) as the original *Snow near* attribute, making it an equally good choice for the root node.\n",
        "\n",
        "## Recursive Learning Process\n",
        "\n",
        "In each recursive step of decision tree learning, there are four cases to consider:\n",
        "\n",
        "::::incremental\n",
        "1. **Mixed examples (positive and negative)**: Choose the best attribute and split\n",
        "2. **Pure node** (all examples have same class): Create a leaf node with that class\n",
        "3. **No examples**: Create a leaf with the majority class from the parent node\n",
        "4. **No attributes left but mixed classes**: Create a leaf with the majority class (handles noisy data)\n",
        "::::\n",
        "\n",
        ". . .\n",
        "\n",
        "This process continues until all branches end in leaf nodes.\n",
        "\n",
        ":::notes\n",
        "These four cases cover all possible scenarios during tree construction. Cases 3 and 4 are important for handling edge cases that might arise, particularly with small or noisy datasets. The algorithm is robust because it always has a way to proceed regardless of the data configuration.\n",
        ":::\n",
        "\n",
        "# Preventing Overfitting {.headline-only}\n",
        "\n",
        "## The Overfitting Problem\n",
        "\n",
        ":::medium\n",
        "Decision trees face a fundamental trade-off between data fit and generalization.\n",
        ":::\n",
        "\n",
        ":::incremental\n",
        "- A deeper tree can fit the training data more perfectly\n",
        "- But a tree that's too deep might capture noise rather than true patterns\n",
        "- This results in poor generalization to new data\n",
        ":::\n",
        "\n",
        ":::notes\n",
        "Overfitting is a critical concept in machine learning. A decision tree that perfectly fits the training data might have learned the noise in the data rather than the underlying pattern. This results in poor performance on new data. Recognizing and preventing overfitting is essential for building useful models.\n",
        ":::\n",
        "\n",
        "## Pruning Techniques\n",
        "\n",
        "__Pruning__ reduces the size of decision trees to prevent overfitting.\n",
        "\n",
        ". . .\n",
        "\n",
        "[**Pre-pruning**]{.h4}\n",
        "\n",
        "Stop growing the tree while building to limit maximum depth.\n",
        "\n",
        ":::incremental\n",
        "- Require minimum samples per node\n",
        "- Set minimum information gain threshold\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "[**Post-pruning**]{.h4}\n",
        "\n",
        "Build the full tree, then remove sections\n",
        "\n",
        ":::incremental\n",
        "- Reduced error pruning — replace nodes with their most common class if it doesn't increase error on a validation set\n",
        "- Cost-complexity pruning — balance accuracy against tree size using a penalty parameter\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "Both approaches improve generalization by reducing model complexity.\n",
        "\n",
        "## Performance Assessment\n",
        "\n",
        "To properly evaluate a decision tree model:\n",
        "\n",
        "[1. Divide your data into separate sets]{.h4 .fragment}\n",
        "\n",
        ":::incremental\n",
        "- Training set (e.g., 70%) — used to build the tree\n",
        "- Validation set (e.g., 10%) — used for pruning decisions\n",
        "- Test set (e.g., 20%) — used only for final evaluation\n",
        ":::\n",
        "\n",
        "[2. Measure accuracy on the test set]{.h4 .fragment}\n",
        "\n",
        "[3. Use **cross-validation[^2]** for more robust assessment]{.h4 .fragment}\n",
        "\n",
        "[^2]: Multiple train-test splits are created and averaged.\n",
        "\n",
        ". . .\n",
        "\n",
        "As the training set grows, prediction quality usually increases, then plateaus.\n",
        "\n",
        "\n",
        "# Usage & Extensions {.headline-only}\n",
        "\n",
        "## Real-World Applications\n",
        "\n",
        "Decision trees are used across many domains:\n",
        "\n",
        ":::incremental\n",
        "- **Finance**: Credit scoring, fraud detection\n",
        "- **Healthcare**: Disease diagnosis, treatment planning\n",
        "- **Marketing**: Customer segmentation, churn prediction\n",
        "- **Operations**: Quality control, maintenance scheduling\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "Their simplicity and interpretability make them particularly valuable when decisions need to be explained to stakeholders.\n",
        "\n",
        ":::notes\n",
        "The practical applications of decision trees are numerous. Their interpretability makes them especially valuable in domains where explanation is important, such as healthcare and finance. Even when more complex models are used for prediction, decision trees are often used to explain those predictions.\n",
        ":::\n",
        "\n",
        "## Ensemble Methods\n",
        "\n",
        "Ensemble methods address the limitations of single decision trees by combining multiple trees.\n",
        "\n",
        ":::incremental\n",
        "- **Random Forests**: Build many trees on random subsets of data and features, then average their predictions\n",
        "- **Gradient Boosting**: Build trees sequentially, with each tree correcting errors made by previous trees\n",
        "- **AdaBoost**: Weight samples based on classification difficulty\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "These ensemble approaches often dramatically outperform single decision trees while retaining some interpretability.\n",
        "\n",
        "## Strengths and Weaknesses\n",
        "\n",
        "|Strengths|Weaknesses|\n",
        "|---------|----------|\n",
        "|Easy to understand and interpret|Can create overly complex trees that don't generalize well|\n",
        "|Minimal data preparation required|Small changes in data can result in a very different tree|\n",
        "|Handles both numerical and categorical data|Biased toward attributes with more levels|\n",
        "|Handles missing values well|Struggles with diagonal decision boundaries|\n",
        "|Computationally inexpensive|Generally lower accuracy than ensemble methods|\n",
        "\n",
        ". . .\n",
        "\n",
        "Understanding these trade-offs helps in choosing when to use decision trees.\n",
        "\n",
        "\n",
        "# Summary\n",
        "\n",
        ":::incremental\n",
        "- Decision trees represent functions by sequencing attribute tests\n",
        "- They excel at explainability but can struggle with certain function types\n",
        "- Tree learning algorithms use information gain to select the most informative attributes\n",
        "- Pruning techniques help prevent overfitting\n",
        "- While simple, decision trees form the foundation for powerful ensemble methods\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "Decision trees balance performance and interpretability, making them a valuable tool in any data scientist's toolkit.\n",
        "\n",
        "\n",
        "# Exercises {.vertical-center background-color=black visibility=hidden}\n",
        "\n",
        "## Divide-and-conquer\n",
        "\n",
        "Create the decision tree by applying the divide-and-conquer approach on the restaurant examples.\n",
        "\n",
        "Compare the naive tree with the tree gained by applying the divide-and-conquer heuristic. What differences do you see?.\n",
        "\n",
        ":::notes\n",
        "\n",
        "::: {.callout-tip collapse=\"true\"}\n",
        "#### Solution note\n",
        "\n",
        "![Splitting the examples by testing on attributes, based on @RusselNorvig2022AIMA [p. 677]](images/divide-and-conquer.svg){#fig-l-agent}\n",
        "\n",
        "At each node, we show the positive (light boxes) and negative (dark boxes) examples remaining. (a) Splitting on *Type* brings us no nearer to distinguishing between positive and negative examples. *Type* is a __poor attribute__ (b) Splitting on *Patrons* does a good job of separating positive and negative examples. After splitting on *Patrons*, *Hungry* is a fairly good selection test. The full tree would be *Patrons*, *Hungry*, *Type* and *Fri*.\n",
        "\n",
        ":::\n",
        ":::\n",
        "\n",
        "## Decision tree\n",
        "\n",
        "Explain how decision trees can be used to create a learning agent. Relate your answers to the components outlined in the lecture notes.\n",
        "\n",
        "We never test the same attribute twice along one path in a decision tree. Why not?\n",
        "\n",
        "## Information Gain\n",
        "\n",
        "Consider the following dataset about weather conditions and whether tennis matches were played:\n",
        "\n",
        "| Day | Outlook  | Temperature | Humidity | Windy | Play Tennis |\n",
        "|-----|----------|-------------|----------|-------|-------------|\n",
        "| 1   | Sunny    | Hot         | High     | No    | No          |\n",
        "| 2   | Sunny    | Hot         | High     | Yes   | No          |\n",
        "| 3   | Overcast | Hot         | High     | No    | Yes         |\n",
        "| 4   | Rain     | Mild        | High     | No    | Yes         |\n",
        "| 5   | Rain     | Cool        | Normal   | No    | Yes         |\n",
        "| 6   | Rain     | Cool        | Normal   | Yes   | No          |\n",
        "| 7   | Overcast | Cool        | Normal   | Yes   | Yes         |\n",
        "| 8   | Sunny    | Mild        | High     | No    | No          |\n",
        "| 9   | Sunny    | Cool        | Normal   | No    | Yes         |\n",
        "| 10  | Rain     | Mild        | Normal   | No    | Yes         |\n",
        "| 11  | Sunny    | Mild        | Normal   | Yes   | Yes         |\n",
        "| 12  | Overcast | Mild        | High     | Yes   | Yes         |\n",
        "| 13  | Overcast | Hot         | Normal   | No    | Yes         |\n",
        "| 14  | Rain     | Mild        | High     | Yes   | No          |\n",
        "\n",
        "\n",
        "1. Calculate the entropy of the *Play Tennis* attribute for the entire dataset.\n",
        "2. Calculate the information gain for each of the four attributes (Outlook, Temperature, Humidity, Windy).\n",
        "3. Which attribute should be selected as the root node of the decision tree?\n",
        "4. Draw the first level of the decision tree.\n",
        "5. For the *Outlook* = Sunny branch, calculate which attribute should be tested next.\n",
        "\n",
        ":::{.callout-tip collapse=\"true\"}\n",
        "### Hint\n",
        "\n",
        "For the entropy calculation, count how many *Yes* and *No* instances there are in the *Play Tennis* column. Remember that the entropy formula is:\n",
        "\n",
        "$$H(X) = - \\sum\\limits_{x \\in V(X)} p_x \\cdot \\log_2 (p_x)$$\n",
        "\n",
        "For information gain, you'll need to split the data based on each attribute value and calculate the weighted entropy.\n",
        ":::\n",
        "\n",
        "## Numeric Attributes\n",
        "\n",
        "Consider the following dataset for predicting credit risk based on income and debt levels:\n",
        "\n",
        "| Customer ID | Income (1000€) | Debt (1000€) | Credit Risk |\n",
        "|-------------|----------------|--------------|-------------|\n",
        "| 1           | 45             | 10           | Low         |\n",
        "| 2           | 32             | 12           | Low         |\n",
        "| 3           | 85             | 15           | Low         |\n",
        "| 4           | 38             | 20           | High        |\n",
        "| 5           | 48             | 28           | High        |\n",
        "| 6           | 29             | 18           | High        |\n",
        "| 7           | 56             | 5            | Low         |\n",
        "| 8           | 22             | 10           | High        |\n",
        "| 9           | 70             | 8            | Low         |\n",
        "| 10          | 35             | 25           | High        |\n",
        "\n",
        "1. List all potential splitting thresholds that should be considered for the *Income* attribute.\n",
        "2. Calculate the information gain for the threshold *Income* ≤ 40.\n",
        "3. List all potential splitting thresholds for the *Debt* attribute.\n",
        "4. Calculate the information gain for the threshold *Debt* ≤ 15.\n",
        "5. Which numerical split would be chosen for the root node of the decision tree?\n",
        "\n",
        ":::{.callout-tip collapse=\"true\"}\n",
        "### Hint\n",
        "\n",
        "For numerical attributes, consider threshold values that are midpoints between adjacent values in the sorted list of values. For example, if you have values 10, 15, and 20, the potential thresholds would be 12.5 and 17.5.\n",
        ":::\n",
        "\n",
        "## Decision Boundaries\n",
        "\n",
        "Consider a two-dimensional feature space with two attributes: x₁ and x₂. The following points represent different classes:\n",
        "\n",
        "- Class A: (2,3), (3,2), (3,3), (4,3)\n",
        "- Class B: (1,1), (2,1), (2,2)\n",
        "- Class C: (4,1), (4,2), (5,1), (5,2)\n",
        "\n",
        "1. Visualize these points in a 2D coordinate system.\n",
        "2. Construct a decision tree with a maximum depth of 2 (counting the root as depth 0) that separates the classes as well as possible.\n",
        "3. Draw the decision boundaries created by your tree on the 2D plot.\n",
        "4. What is the classification accuracy of your tree on the training data?\n",
        "5. If a new point (3,1) is encountered, how would your tree classify it?\n",
        "\n",
        ":::{.callout-tip collapse=\"true\"}\n",
        "### Hint\n",
        "\n",
        "Start by identifying the best horizontal or vertical split that separates the classes. Then, apply the same process to each resulting region. The decision boundaries will form axis-parallel lines in the 2D space.\n",
        ":::\n",
        "\n",
        "## Pruning\n",
        "\n",
        "Consider the following decision tree trained on a small dataset:\n",
        "\n",
        "```{mermaid}\n",
        "%%| fig-cap: \"Unpruned decision tree\"\n",
        "\n",
        "graph TD\n",
        "    A[Age ≤ 30?] -->|Yes| B[B; Income ≤ 40K?]\n",
        "    A -->|No| C[C; Income ≤ 60K?]\n",
        "    \n",
        "    B -->|Yes| D[D; Buy = No<br>3/4 correct]\n",
        "    B -->|No| E[E; Education?]\n",
        "    \n",
        "    C -->|Yes| F[F; Education?]\n",
        "    C -->|No| G[G; Buy = Yes<br>5/6 correct]\n",
        "    \n",
        "    E -->|High| H[H; Buy = Yes<br>2/2 correct]\n",
        "    E -->|Low| I[I; Buy = No<br>1/1 correct]\n",
        "    \n",
        "    F -->|High| J[J; Buy = Yes<br>3/4 correct]\n",
        "    F -->|Low| K[K; Buy = No<br>2/3 correct]\n",
        "```\n",
        "\n",
        "The tree makes some errors on the training data, as indicated by the fractions (e.g., \"3/4 correct\" means the node correctly classifies 3 out of 4 training examples that reach that node).\n",
        "\n",
        "You also have a validation set with the following distribution:\n",
        "\n",
        "| Node | Validation examples | Correctly classified |\n",
        "|------|---------------------|----------------------|\n",
        "| D    | 8                   | 5                    |\n",
        "| H    | 3                   | 2                    |\n",
        "| I    | 2                   | 1                    |\n",
        "| J    | 6                   | 3                    |\n",
        "| K    | 5                   | 3                    |\n",
        "| G    | 10                  | 7                    |\n",
        "\n",
        "\n",
        "1. Calculate the classification accuracy of the unpruned tree on the validation set.\n",
        "2. Identify which nodes, if any, should be pruned.\n",
        "3. Explain why pruning improved or worsened the performance.\n",
        "\n",
        ":::{.callout-tip collapse=\"true\"}\n",
        "### Hint\n",
        "\n",
        "In reduced error pruning, replace a node with its most common class if doing so doesn't decrease accuracy on the validation set. Start with the leaf nodes and work your way up. For each non-leaf node, calculate the accuracy before and after replacing it with a leaf.\n",
        "\n",
        "No subtree pruning improves accuracy, so no pruning should be applied.\n",
        ":::\n",
        "\n",
        "# Literature\n",
        "::: {#refs}\n",
        ":::"
      ],
      "id": "815d2504"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/awe/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}